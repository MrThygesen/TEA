Below is a **complete, test‚Äënet‚Äìready starter kit** for your **‚Äúearn points ‚Üí pay with TEA‚Äù** demo, matching your stack:

* **Solidity‚ÄØ0.8.20**, **OpenZeppelin‚ÄØ4.9.5**
* **RainbowKit‚ÄØ2.2.8**, **Wagmi‚ÄØv2**, **Ethers‚ÄØv6 /‚ÄØviem**
* Points are **non‚Äëtransferable** and **minted solely by a `PurchaseTracker` contract**
* React component accepts a **purchase‚Äëamount input** and shows the user‚Äôs points balance

---

## 1.‚ÄØSmart contracts

### 1.1‚ÄØ`PointsToken.sol`

```solidity
// SPDX‚ÄëLicense‚ÄëIdentifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

/**
 * @title PointsToken
 * @dev Non‚Äëtransferable ERC‚Äë20 used for loyalty points.
 *      Only the PurchaseTracker contract may mint.
 */
contract PointsToken is ERC20 {
    error NonTransferable();
    error NotPurchaseTracker();

    address public immutable purchaseTracker;

    constructor(address _purchaseTracker)
        ERC20("TEA Loyalty Points", "TEAP")
    {
        require(_purchaseTracker != address(0), "Zero purchaseTracker");
        purchaseTracker = _purchaseTracker;
    }

    /* --------------------------------------------------------------------- */
    /*                               Minting                                 */
    /* --------------------------------------------------------------------- */
    function mint(address to, uint256 amount) external {
        if (msg.sender != purchaseTracker) revert NotPurchaseTracker();
        _mint(to, amount);
    }

    /* --------------------------------------------------------------------- */
    /*                       Disable transfers & approvals                   */
    /* --------------------------------------------------------------------- */
    function _update(
        address from,
        address to,
        uint256 value
    ) internal override {
        // Allow minting (from == 0) and burning (to == 0) only
        if (from != address(0) && to != address(0)) revert NonTransferable();
        super._update(from, to, value);
    }

    function approve(address, uint256) public pure override returns (bool) {
        revert NonTransferable();
    }

    function transfer(address, uint256) public pure override returns (bool) {
        revert NonTransferable();
    }

    function transferFrom(
        address,
        address,
        uint256
    ) public pure override returns (bool) {
        revert NonTransferable();
    }
}
```

### 1.2‚ÄØ`PurchaseTracker.sol`

```solidity
// SPDX‚ÄëLicense‚ÄëIdentifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./PointsToken.sol";

/**
 * @title PurchaseTracker
 * @dev Mints points 1:1 with `amountSpent` (18‚ÄØdecimals) to the caller.
 *      In production you might restrict `recordPurchase` to partner PoS
 *      devices; for the demo it's open to any user.
 */
contract PurchaseTracker is Ownable {
    PointsToken public immutable points;

    event PointsEarned(address indexed user, uint256 amount);

    constructor(PointsToken _points) {
        points = _points;
    }

    /**
     * @notice Record a purchase and mint points to `msg.sender`.
     * @param amountSpent Purchase amount in 18‚Äëdecimals (e.g. parseEther("25")).
     */
    function recordPurchase(uint256 amountSpent) external {
        // Mint points equal to amount spent
        points.mint(msg.sender, amountSpent);
        emit PointsEarned(msg.sender, amountSpent);
    }
}
```

> **Deployment order**
>
> 1. Deploy `PurchaseTracker` with a dummy address first (or use CREATE2).
> 2. Deploy `PointsToken`, passing the `PurchaseTracker` address.
> 3. Call `PurchaseTracker.setPointsToken()` (if you added one) **OR**
>    redeploy `PurchaseTracker` now that you know the token address.
> 4. (Optional) Transfer contract ownership to a DAO multi‚Äësig.

---

## 2.‚ÄØReact component ‚Äì `EarnPoints.js`

> Place in `frontend/components/EarnPoints.js` (or similar).

```jsx
'use client'

import { useState } from 'react'
import { toast } from 'react-hot-toast'
import { useAccount, useWriteContract, useReadContract } from 'wagmi'
import { parseEther, formatEther } from 'viem'

// TODO: replace with your deployed addresses
const PURCHASE_TRACKER_ADDRESS = '0xYourPurchaseTracker'
const POINTS_TOKEN_ADDRESS     = '0xYourPointsToken'

// --- Minimal ABIs ---------------------------------------------------------
const purchaseTrackerAbi = [
  {
    name: 'recordPurchase',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ name: 'amountSpent', type: 'uint256' }],
    outputs: [],
  },
]

const pointsTokenAbi = [
  {
    name: 'balanceOf',
    type: 'function',
    stateMutability: 'view',
    inputs: [{ name: 'account', type: 'address' }],
    outputs: [{ name: '', type: 'uint256' }],
  },
]

export default function EarnPoints() {
  const { address } = useAccount()
  const [amount, setAmount] = useState('')

  // Read points balance
  const { data: balance } = useReadContract({
    abi: pointsTokenAbi,
    address: POINTS_TOKEN_ADDRESS,
    functionName: 'balanceOf',
    args: [address ?? '0x0'],
    query: { enabled: Boolean(address) },
  })

  // Write ‚Äì record purchase
  const { writeContractAsync, isPending } = useWriteContract()

  const handleEarn = async () => {
    try {
      const hash = await writeContractAsync({
        abi: purchaseTrackerAbi,
        address: PURCHASE_TRACKER_ADDRESS,
        functionName: 'recordPurchase',
        args: [parseEther(amount || '0')],
      })
      toast.success('Tx submitted: ' + hash)
      setAmount('')
    } catch (err) {
      console.error(err)
      toast.error(err.message || 'Transaction failed')
    }
  }

  return (
    <div className="max-w-md mx-auto p-4 border rounded-xl space-y-4">
      <h2 className="text-xl font-semibold">Earn TEA Points</h2>

      <label className="block">
        <span className="text-sm">Purchase amount (in MATIC / USDC)</span>
        <input
          type="number"
          min="0"
          step="0.01"
          placeholder="25.00"
          value={amount}
          onChange={e => setAmount(e.target.value)}
          className="w-full p-2 border rounded mt-1"
        />
      </label>

      <button
        onClick={handleEarn}
        disabled={isPending || !amount}
        className="w-full bg-emerald-600 hover:bg-emerald-700 text-white py-2 rounded disabled:opacity-40"
      >
        {isPending ? 'Confirm in wallet‚Ä¶' : 'Record Purchase & Mint Points'}
      </button>

      <p className="text-sm text-gray-600">
        Your balance:{' '}
        {balance ? `${Number(formatEther(balance)).toLocaleString()} pts` : '‚Äî'}
      </p>
    </div>
  )
}
```

**How it works**

1. The user types the purchase amount (e.g.‚ÄØ`25`).
2. `parseEther('25')` converts it to `25000000000000000000` (18‚ÄØdecimals).
3. The transaction calls `recordPurchase(amount)`.
4. `PurchaseTracker` mints **25 points** to the user‚Äôs address.
5. Balance is re‚Äëqueried and displayed.

---

## 3.‚ÄØWiring it into your Next.js pages

```jsx
// frontend/pages/index.js (excerpt)
import EarnPoints from '../components/EarnPoints'

export default function Home() {
  return (
    <main className="flex flex-col items-center p-8 space-y-12">
      {/* existing SBT mint component */}
      <EarnPoints />
      {/* future: PayInTEA, DAO voting, etc. */}
    </main>
  )
}
```

---

### üîÑ Next steps & notes

| Task                                          | Why / How                                                                |
| --------------------------------------------- | ------------------------------------------------------------------------ |
| **Deploy & verify** the two contracts on Amoy | Use Hardhat `deploy` scripts; verify on Polygonscan for ABI auto‚Äëimport. |
| **Update addresses** in `EarnPoints.js`       | Replace `0xYour‚Ä¶` placeholders.                                          |
| **Gasless meta‚Äëtx (optional)**                | Let venues submit purchases on behalf of users (EIP‚Äë2771 forwarder).     |
| **Partner registry**                          | Map caf√© IDs to wallet addresses for future TEA payments.                |
| **Integrate Pay‚Äëin‚ÄëTEA component**            | Re‚Äëuse Wagmi `useWriteContract` but call `TEAToken.transfer(...)`.       |

That‚Äôs everything you need for the **Phase‚ÄØ2 ‚ÄúEarn Points‚Äù MVP demo**. Let me know when you‚Äôre ready to tackle the **TEA payment UI** or DAO ambassador voting‚Äîhappy to scaffold those next!


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
new general timeline

| Week        | Focus                                           |
| ----------- | ----------------------------------------------- |
| **Week 1**  | Finalize SBT mint + TEA payment UI              |
| **Week 2**  | Add PointsToken + earning logic                 |
| **Week 3**  | DAO roles & voting prototype                    |
| **Week 4+** | Mainnet planning, DEX pair, gas-saving research |
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





