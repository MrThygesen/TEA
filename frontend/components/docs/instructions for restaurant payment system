Thanks for sharing your `TEAToken` contract — it's clean and well-structured, fully aligned with OpenZeppelin 4.9.5 standards. ✅

Let’s cover:

---

## ✅ 1. Pay-in-TEA Code (Sol + JS)

### ✅ 2. Uniswap integration – “auto-buy” TEA

### ✅ 3. Discount logic & token holding models (best practice)

---

## ✅ 1. Payment System (User → Restaurant) — Code

### ✅ Solidity: No extra contract needed

Since your `TEAToken` is a standard ERC-20, **users can directly call `transfer(to, amount)`**, which Wagmi handles easily.

### ✅ React component: `PayInTEA.js`

```jsx
'use client'

import { useState } from 'react'
import { toast } from 'react-hot-toast'
import { useAccount, useWriteContract, useReadContract } from 'wagmi'
import { parseEther } from 'viem'

// Replace with actual deployed address
const TEA_TOKEN_ADDRESS = '0xYourTEATokenAddress'

// --- Minimal ABI for TEAToken ---
const teaTokenAbi = [
  {
    name: 'transfer',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [
      { name: 'to', type: 'address' },
      { name: 'amount', type: 'uint256' }
    ],
    outputs: [{ name: '', type: 'bool' }]
  },
  {
    name: 'balanceOf',
    type: 'function',
    stateMutability: 'view',
    inputs: [{ name: 'account', type: 'address' }],
    outputs: [{ name: '', type: 'uint256' }]
  }
]

export default function PayInTEA() {
  const { address } = useAccount()
  const [amount, setAmount] = useState('')
  const [restaurant, setRestaurant] = useState('')

  const { data: balance } = useReadContract({
    abi: teaTokenAbi,
    address: TEA_TOKEN_ADDRESS,
    functionName: 'balanceOf',
    args: [address ?? '0x0'],
    query: { enabled: Boolean(address) },
  })

  const { writeContractAsync, isPending } = useWriteContract()

  const handlePayment = async () => {
    try {
      const hash = await writeContractAsync({
        abi: teaTokenAbi,
        address: TEA_TOKEN_ADDRESS,
        functionName: 'transfer',
        args: [restaurant, parseEther(amount)],
      })
      toast.success('Payment submitted: ' + hash)
      setAmount('')
      setRestaurant('')
    } catch (err) {
      toast.error(err.message || 'Payment failed')
    }
  }

  return (
    <div className="max-w-md mx-auto p-4 border rounded-xl space-y-4">
      <h2 className="text-xl font-semibold">Pay a Restaurant in TEA</h2>

      <label className="block text-sm">
        Restaurant wallet address
        <input
          type="text"
          placeholder="0x..."
          value={restaurant}
          onChange={(e) => setRestaurant(e.target.value)}
          className="w-full p-2 border rounded mt-1"
        />
      </label>

      <label className="block text-sm">
        Amount in TEA
        <input
          type="number"
          min="0"
          step="0.01"
          placeholder="15.00"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          className="w-full p-2 border rounded mt-1"
        />
      </label>

      <button
        onClick={handlePayment}
        disabled={isPending || !restaurant || !amount}
        className="w-full bg-indigo-600 text-white py-2 rounded hover:bg-indigo-700 disabled:opacity-40"
      >
        {isPending ? 'Confirm in wallet…' : 'Pay in TEA'}
      </button>

      <p className="text-sm text-gray-600">
        Your TEA balance: {balance ? `${(Number(balance) / 1e18).toFixed(2)} TEA` : '—'}
      </p>
    </div>
  )
}
```

---

## ✅ 2. Can the contract automatically buy TEA from Uniswap?

**Not automatically** from a basic ERC-20 transfer. Here’s what you need to support “buy TEA if needed”:

### ❌ What doesn't work:

```solidity
// User calls TEAToken.transfer() → only transfers, doesn’t check if user has enough or swap anything
```

### ✅ What does work (advanced option):

Use **Uniswap’s router contract** in a custom contract or front-end swap:

* Via Uniswap v3 SDK (frontend):

  * Call `swapExactETHForTokens` or `swapExactTokensForTokens`
* Or wrap a custom `PaymentProcessor.sol` contract:

  ```solidity
  // Not included in MVP, but you could do:
  function payWithMATICOrUSDC(...) external {
    swap to TEA via Uniswap → then transfer to restaurant
  }
  ```

For your MVP, just show a notice:

> 💡 You must hold TEA in your wallet to pay.

And later:

> ✅ Add “Buy TEA” button using a frontend Uniswap/1inch swap widget.

---

## ✅ 3. Do users need to *hold TEA* before they can pay?

Yes — **holding TEA first is the norm**. You don’t want payments to fail or swap unpredictably.

### ✅ Common Design Patterns:

| Model                                       | Example                               |
| ------------------------------------------- | ------------------------------------- |
| **Hold TEA = get discount**                 | “Get 10% off if you pay in TEA”       |
| **Must pay in TEA**                         | Required to use TEA to complete bill  |
| **Hybrid:** pay in MATIC, get points in TEA | Still rewards TEA as loyalty currency |

You can even **mint points only if payment was in TEA**, to incentivize behavior.

---

## 🧪 Demo MVP Summary

| Feature                | Status                                  |
| ---------------------- | --------------------------------------- |
| ✅ SBT minting UI       | ✅ Done                                  |
| ✅ Earn points UI       | ✅ Delivered above                       |
| ✅ Pay in TEA UI        | ✅ Delivered above                       |
| ❌ Buy TEA from Uniswap | ❌ Optional (Uniswap SDK or 1inch later) |

---

Would you like me to scaffold a **“Buy TEA with MATIC”** button (Uniswap Amoy simulation) or design a **discount logic wrapper** for shops accepting TEA?

