// pages/api/events.js
import { pool } from '../../lib/postgres.js'

export default async function handler(req, res) {
  const { method, body, query } = req

  const parseIntOrFail = (val, field) => {
    const num = Number(val)
    if (!Number.isInteger(num)) throw new Error(`${field} must be a valid integer`)
    return num
  }

  try {
    switch (method) {
      case 'GET': {
        if (query.id) {
          const id = parseIntOrFail(query.id, 'id')
          const result = await pool.query('SELECT * FROM events WHERE id = $1', [id])
          if (result.rows.length === 0) return res.status(404).json({ error: 'Event not found' })
          return res.status(200).json(result.rows[0])
        } else {
          const result = await pool.query('SELECT * FROM events ORDER BY id DESC')
          return res.status(200).json(result.rows)
        }
      }

      case 'POST': {
        const {
          id, // optional only for updates
          name,
          city,
          datetime,
          min_attendees,
          max_attendees,
          is_confirmed,
          description,
          details,
          venue,
          venue_type,
          basic_perk,
          advanced_perk,
          tag1,
          tag2,
          tag3,
          tag4,
          language,
          price,
          image_url,
        } = body

        if (!name || !city || !datetime) {
          return res.status(400).json({ error: 'Missing required fields (name, city, datetime)' })
        }

        if (id) {
          // ✅ Update existing event, keep id unchanged
          const result = await pool.query(
            `
            UPDATE events SET
              name = $2,
              city = $3,
              datetime = $4,
              min_attendees = $5,
              max_attendees = $6,
              is_confirmed = $7,
              description = $8,
              details = $9,
              venue = $10,
              venue_type = $11,
              basic_perk = $12,
              advanced_perk = $13,
              tag1 = $14,
              tag2 = $15,
              tag3 = $16,
              tag4 = $17,
              language = $18,
              price = $19,
              image_url = $20
            WHERE id = $1
            RETURNING *
            `,
            [
              Number(id),
              name,
              city,
              datetime,
              min_attendees ? Number(min_attendees) : null,
              max_attendees ? Number(max_attendees) : null,
              is_confirmed ?? false,
              description || '',
              details || '',
              venue || '',
              venue_type || '',
              basic_perk || '',
              advanced_perk || '',
              tag1 || '',
              tag2 || '',
              tag3 || '',
              tag4 || '',
              language || 'en',
              price ? Number(price) : 0,
              image_url || '',
            ]
          )

          if (result.rows.length === 0) return res.status(404).json({ error: 'Event not found' })
          return res.status(200).json(result.rows[0])
        } else {
          // ✅ Create new event with autogenerated id
          const insertResult = await pool.query(
            `
            INSERT INTO events (
              name, city, datetime,
              min_attendees, max_attendees, is_confirmed,
              description, details, venue, venue_type,
              basic_perk, advanced_perk,
              tag1, tag2, tag3, tag4,
              language, price, image_url
            ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19)
            RETURNING id
            `,
            [
              name,
              city,
              datetime,
              min_attendees ? Number(min_attendees) : null,
              max_attendees ? Number(max_attendees) : null,
              is_confirmed ?? false,
              description || '',
              details || '',
              venue || '',
              venue_type || '',
              basic_perk || '',
              advanced_perk || '',
              tag1 || '',
              tag2 || '',
              tag3 || '',
              tag4 || '',
              language || 'en',
              price ? Number(price) : 0,
              image_url || '',
            ]
          )

          const newId = insertResult.rows[0].id

          // ✅ Set group_id = id
          await pool.query('UPDATE events SET group_id = $1 WHERE id = $1', [newId])

          const fullRow = await pool.query('SELECT * FROM events WHERE id = $1', [newId])
          return res.status(200).json(fullRow.rows[0])
        }
      }

      default:
        res.setHeader('Allow', ['GET', 'POST'])
        return res.status(405).end(`Method ${method} Not Allowed`)
    }
  } catch (err) {
    console.error('❌ /api/events error:', err)
    return res.status(500).json({ error: err.message })
  }
}

